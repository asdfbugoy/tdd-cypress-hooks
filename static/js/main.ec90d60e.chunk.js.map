{"version":3,"sources":["components/ProgressBar.js","App.js","serviceWorker.js","index.js"],"names":["ProgressBar","React","useState","limit","setLimit","bars","setBars","buttons","setButtons","selectedBar","setSelectedBar","useEffect","fetch","then","response","json","data","className","map","d","i","key","data-limit","data-value","style","width","parseInt","onChange","e","target","value","length","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sLA2DeA,EAzDK,WAAO,IAAD,EACEC,IAAMC,SAAS,GADjB,mBACjBC,EADiB,KACVC,EADU,OAEAH,IAAMC,SAAS,IAFf,mBAEjBG,EAFiB,KAEXC,EAFW,OAGML,IAAMC,SAAS,IAHrB,mBAGjBK,EAHiB,KAGRC,EAHQ,OAIcP,IAAMC,SAAS,GAJ7B,mBAIjBO,EAJiB,KAIJC,EAJI,KAKtBT,IAAMU,WAAU,WAMZ,OALAC,MAAM,qCAAqCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GAC9EZ,EAASY,EAAKb,OACdG,EAAQU,EAAKX,MACbG,EAAWQ,EAAKT,YAEb,eAGR,IAcH,OAAO,yBAAKU,UAAU,0BAClB,yBAAKA,UAAU,QACX,yBAAKA,UAAU,eAAf,iBACA,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QACVZ,EAAKa,KAAI,SAACC,EAAGC,GAAJ,OAAU,yBAAKC,IAAKD,EAAGH,UAAU,mCACvC,yBAAKK,aAAYnB,EAAOoB,aAAYJ,EAAGF,UAAS,6CAAwCG,IAAMX,EAAc,kCAAoC,WAAae,MAAO,CAAEC,MAAM,GAAD,OAAKN,EAAIhB,EAAQ,IAAjB,OACvK,yBAAKc,UAAU,sCAAf,UAAwDE,EAAxD,YAA6DhB,EAA7D,cAAwEuB,SAASP,EAAIhB,EAAQ,IAAK,IAAlG,aAKhB,yBAAKc,UAAU,YACX,4BAAQU,SA5BX,SAAAC,GACblB,EAAegB,SAASE,EAAEC,OAAOC,MAAO,MA2BIA,MAAOrB,EAAaQ,UAAU,qBACrDZ,EAAKa,KAAI,SAACC,EAAGC,GAAJ,OAAU,4BAAQC,IAAKD,EAAGU,MAAOV,GAAvB,eAAmCA,EAAI,EAAvC,iBAAiDD,QAEzE,yBAAKF,UAAU,uBACVV,EAAQW,KAAI,SAACC,EAAGC,GAAJ,OAAU,4BAAQC,IAAKD,EAAGG,aAAYJ,EAAGF,UAAS,yBAAoBG,EAAIb,EAAQwB,OAAS,EAAI,QAAU,IAAMC,SA7BpIF,EA6BqJX,EA7B5I,SAAAS,GACrBtB,EAAQD,EAAKa,KAAI,SAACC,EAAGC,GAMjB,OALIA,IAAMX,KACNU,GAAQW,GACA,IAAGX,EAAI,GACXA,EAAIhB,IAAOgB,EAAIhB,IAEhBgB,SAsB2JA,GA7B1J,IAAAW,SAkCR,yBAAKb,UAAU,0BAAf,yCC3CGgB,EARH,WACR,OACI,yBAAKhB,UAAU,sBACX,kBAAC,EAAD,QCMQiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,iB","file":"static/js/main.ec90d60e.chunk.js","sourcesContent":["import React from 'react';\n\nconst ProgressBar = () => {\n    let [limit, setLimit] = React.useState(0);\n    let [bars, setBars] = React.useState([]);\n    let [buttons, setButtons] = React.useState([]);\n    let [selectedBar, setSelectedBar] = React.useState(0);\n    React.useEffect(() => {\n        fetch('https://pb-api.herokuapp.com/bars').then(response => response.json()).then(data => {\n            setLimit(data.limit);\n            setBars(data.bars);\n            setButtons(data.buttons);\n        });\n        return () => {\n            \n        }\n    }, []);\n    const onChange = e => {\n        setSelectedBar(parseInt(e.target.value, 10));\n    }\n    const onClick = value => e => {\n        setBars(bars.map((d, i) => {\n            if (i === selectedBar) {\n                d = d + value;\n                if (d < 0) d = 0;\n                if (d > limit) d = limit;\n            }\n            return d;\n        }))\n    }\n    return <div className=\"progress-bar-component\">\n        <div className=\"card\">\n            <div className=\"card-header\">Progress Bar </div>\n            <div className=\"card-body\">\n                <div className=\"row\">\n                    <div className=\"col-sm-8\">\n                        <div className=\"bars\">\n                            {bars.map((d, i) => <div key={i} className=\"progress position-relative mb-3\">\n                                <div data-limit={limit} data-value={d} className={`progress-bar progress-bar-animated ${i === selectedBar ? 'bg-warning progress-bar-striped' : 'bg-info'}`} style={{ width: `${d / limit * 100}%` }}>\n                                    <div className=\"progress-percent text-center w-100\">{`${d}/${limit} = ${parseInt(d / limit * 100, 10)}%`}</div>\n                                </div>\n                            </div>)}\n                        </div>\n                    </div>\n                    <div className=\"col-sm-4\">\n                        <select onChange={onChange} value={selectedBar} className=\"form-control mb-3\">\n                            {bars.map((d, i) => <option key={i} value={i}>{`bar #${i + 1} with ${d}`}</option>)}\n                        </select>\n                        <div className=\"buttons text-center\">\n                            {buttons.map((d, i) => <button key={i} data-value={d} className={`btn btn-primary${i < buttons.length - 1 ? ' mr-3' : ''}`} onClick={onClick(d)}>{d}</button>)}\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"card-footer text-right\">@Script by Francis Samande Declaro</div>\n        </div>\n    </div>\n}\n\nexport default ProgressBar;","import React from 'react';\nimport ProgressBar from './components/ProgressBar';\n\nconst App = () => {\n    return (\n        <div className=\"App container py-3\">\n            <ProgressBar />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}